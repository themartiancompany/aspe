#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'ur-publishers' \
    'ur'
}

# shellcheck disable=SC2034
_global_variables() {
  pkgs=()
  get_date=""
  up_address=""
  source_origin=""
  source_publisher=""
  target_revision=""
  output_dir=""
  work_dir=""
  color=""
  quiet=""
}

# Get source from a selected origin
# $1: origin (archlinux,
#             aur,
#             gur)
_git_repo_uri_get() {
  local \
    _origin="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _http \
    _ns
  _ns="${_publisher}"
  if [[ "${_origin}" == "archlinux" ]]; then
    _http='https://gitlab.archlinux.org'
    echo \
      "${_http}/${_ns}/packaging/packages/${_pkg}"
  elif [[ "${_origin}" == "aur" ]]; then
    _http='https://aur.archlinux.org'
    echo \
      "${_http}/${_pkg}"
  elif [[ "${_origin}" == "gur" ]]; then
    _http="http://github.com"
    _ns="${_publisher}"
    echo \
      "${_http}/${_ns}/${_pkg}-ur"
  fi
}

_clone_validate() {
  local \
    _pkg_dir="${1}" \
    _msg=() \
    _git_opts=()
  _git_opts+=(
    -C
      "${_pkg_dir}"
  )
  if [[ ! -d "${_pkg_dir}" ]]; then
    _msg=(
      "cloning into '${_pkg_dir}'"
      "failed."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _commit_last="$( \
    git \
      "${_git_opts[@]}" \
      rev-parse \
        HEAD 2>/dev/null || \
    true)"
  if [[ "${_commit_last}" != "HEAD" ]]; then
    _retrieved="true"
    unset \
      GIT_TERMINAL_PROMPT
  elif [[ "${_commit_last}" == "HEAD" ]]; then
    _msg=(
      "cloned an empty repository,"
      "deleting."
    )
    _msg_warning \
      "${_msg[*]}"
    rm \
      -rf \
      "${_pkg_dir}"
  fi
}

_git_clone() {
  local \
    _origin="${1}" \
    _publisher="${2}" \
    _pkg_dir="${3}" \
    _pkg="${4}" \
    _clone_opts=() \
    _uri
  if [[ "${quiet}" == "y" ]]; then
    _clone_opts+=(
      --quiet
    )
  fi
  _uri="$( \
    _git_repo_uri_get \
      "${_origin}" \
      "${_publisher}" \
      "${_pkg}")"
  GIT_TERMINAL_PROMPT=0 \
  git \
    clone \
      "${_clone_opts[@]}" \
      "${_uri}" \
      "${_pkg_dir}" || \
    true
  _clone_validate \
    "${_pkg_dir}"
}

_contract_call_opts_setup() {
  local \
    _msg=() \
    _evm_contract_call_opts=()
  _evm_contract_call_opts+=(
    -n
      "${_target_network}"
    -k
      "${_api_key_path}"
  )
  _ur_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ur_abi}"
    -B
      "${_ur_bytecode}"
    -C
      "${_ur_compiler_output}"
  )
  _check_call_opts+=(
    "${_fs_call_opts[@]}"
    -t
      "static"
  )
  _publish_call_opts+=(
    "${_fs_call_opts[@]}"
    -t
      "dynamic"
  )
  _verify_call_opts+=(
    "${_fs_call_opts[@]}"
    -t
      "static"
  )
  _lock_call_opts+=(
    "${_fs_call_opts[@]}"
    -t
      "dynamic"
  )
  _length_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ll_abi}"
    -B
      "${_ll_bytecode}"
    -C
      "${_ll_compiler_output}"
    -t
      "static"
  )
  _length_lock_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ll_abi}"
    -B
      "${_ll_bytecode}"
    -C
      "${_ll_compiler_output}"
    -t
      "dynamic"
  )
  _msg=(
    "evm-contract-call will be called"
    "with base options '${_evm_contract_call_opts[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
}

_publisher_validate() {
  local \
    _publisher="${1}" \
    _pkg="${2}" \
    _validate_call_opts=()
}

_ur_get() {
  local \
    _publisher="${1}" \
    _pkg_dir="${2}" \
    _pkg="${3}" \
    _evm_contract_call_opts=()
  _contract_call_opts_setup 
  _publisher_validate \
    "${_publisher}" \
    "${_pkg}"
}

_source_get_opts() {
  local \
    _origin="${1}" 
  if [[ "${_origin}" == "ur" ]]; then
    _cmd=(
      "_ur_get"
    )
    _cmd_args=(
      "${_origin}"
      "${_pkg_dir}"
      "${_pkg}"
    )
  else
    _check_cmd \
      'git'
    _cmd=(
      "_git_clone"
    )
    _cmd_args=(
      "${_origin}"
      "${_pkg_dir}"
      "${_pkg}"
    )
  fi
}

_origin_validate() {
  local \
    _target_origin="${1}" \
  if [[ " ${_origins[*]} " != *" ${_target_origin}"* ]]; then
    _msg_error \
      "unknown origin '${_target_origin}'." \
      1
  fi
}

_origins_sort() {
  local \
    _target_origin="${1}" \
    _origins_new=() \
    _origin
  _origins_new+=(
    "${_target_origin}"
  )
  for _origin in \
    "${_origins[@]}"; do
    if [[ "${_origin}" != "${_target_origin}" ]]; then
      _origins_new+=(
        "${_origin}"
      )
    fi
  done
  _origins=(
    "${_origins_new[@]}"
  )
}

_aspe() {
  local \
    _origin="${1}" \
    _publisher="${2}" \
    _revision="${3}" \
    _work_dir="${4}" \
    _output_dir="${5}" \
    _pkgs=() \
    _origin \
    _origins=() \
    _pkg_dir \
    _retrieved \
    _cmd=() \
    _cmd_args=() \
    _msg=()
  shift \
    5
  _pkgs=(
    "$@"
  )
  _origins=(
    "ur"
    "gur"
    "aur"
    "archlinux"
  )
  _origin_check \
    "${_origin}"
  _origins_sort \
    "${_origin}"
  for _pkg in "${_pkgs[@]}"; do
    _retrieved="false"
    _pkg_dir="${_work_dir}/${_pkg}"
    for _origin in "${_origins[@]}"; do
      _source_get_opts \
        "${_origin}"
      "${_cmd[@]}" \
        "${_cmd_args[@]}"
      if [[ "${_retrieved}" == "true" ]]; then
        break
      fi
    done
    if [[ "${_retrieved}" == "false" ]]; then
      _msg_error \
        "${_msg[*]}" \
	1
    fi
  done
}

_source_publisher_auto_detect() {
  local \
    _origin \
    _publisher
  _origin="$( \
    _get \
      "source" \
      "origin")"
  if [[ "${_origin}" == "gur" ]]; then
    _publisher="themartiancompany"
  elif [[ "${_origin}" == "ur" ]]; then
    _publisher="$( \
      evm-wallet \
       get \
         "${_wallet_name}" \
         "address")"
  elif [[ "${_origin}" == "archlinux" ]]; then
    _publisher="archlinux"
  fi
  _set_override \
    "source" \
    "publisher" \
    "${_publisher}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "work" \
    "dir" \
    "${HOME}/.cache/aspe"
  _set_override \
    "output" \
    "dir" \
    "$(realpath \
         $(pwd))"
  _set_override \
    "source" \
    "origin" \
    "ur"
  _source_publisher_auto_detect
  _set_override \
    "target" \
    "revision" \
    "latest"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Build recipes retrieval tool.

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -s <origin>          Source origin ('ur', 'gur', 'archlinux',
                          'aur').
			  Default: $(_get "source" "origin")
     -p <publisher>       Source publisher. Valid for origins
                          are 'ur' and 'gur'. For 'gur'it defaults to
                          'themartiancompany', for 'ur' to the
                          kirsh trusted Ur publisher.
			  Default: $(_get "source" "publisher")
     -w <work_dir>        Work directory.
			  Default: $(_get "output" "dir")
     -o <output_dir>      Output directory.
			  Default: $(_get "output" "dir")
     -n <revision>        Target recipe revision to retrieve.
			  Default: $(_get "target" "revision")

     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "            Source origin:   $(_get "source" "origin")"
  _msg_info "         Source publisher:   $(_get "source" "publisher")"
  _msg_info "          Target revision:   $(_get "target" "revision")"
  _msg_info "           Work directory:   $(_get "work" "dir")"
  _msg_info "         Output directory:   $(_get "output" "dir")"
  _msg_info "                 Packages:   ${pkgs[@]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    's:p:w:o:n:cvh?' \
    arg; do
  case \
    "${arg}" in
    s) override_source_origin="${OPTARG}" ;;
    p) override_source_publisher="${OPTARG}" ;;
    w) override_work_dir="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    n) override_target_revision="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
pkgs+=(
  "$@"
)
if (( $# < 1 )); then
  _msg_error \
    "No packages specified" \
    0
  _usage \
    1
fi
_set_overrides
app_opts+=(
  "$(_get \
       "source" \
       "origin")"
  "$(_get \
       "source" \
       "publisher")"
  "$(_get \
       "target" \
       "revision")"
  "$(_get \
       "work" \
       "dir")"
  "$(_get \
       "output" \
       "dir")"
  "${pkgs[@]}"
)
_show_config
_aspe \
  "${app_opts[@]}"
