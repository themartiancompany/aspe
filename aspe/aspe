#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs'
  _check_cmd \
    'ur-publishers' \
    'ur'
}

# shellcheck disable=SC2034
_global_variables() {
  pkgs=()
  get_date=""
  ur_address=""
  ur_version=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  retrieve_force=""
  verify_skip=""
  deployments_dir=""
  user_level=""
  source_origin=""
  source_publisher=""
  target_revision=""
  output_dir=""
  work_dir=""
  color=""
  quiet=""
}

# Get source from a selected origin
# $1: origin (archlinux,
#             aur,
#             gur)
_git_repo_uri_get() {
  local \
    _origin="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _http \
    _ns
  _ns="${_publisher}"
  if [[ "${_origin}" == "archlinux" ]]; then
    _http='https://gitlab.archlinux.org'
    echo \
      "${_http}/${_ns}/packaging/packages/${_pkg}"
  elif [[ "${_origin}" == "aur" ]]; then
    _http='https://aur.archlinux.org'
    echo \
      "${_http}/${_pkg}"
  elif [[ "${_origin}" == "gur" ]]; then
    _http="http://github.com"
    _ns="${_publisher}"
    echo \
      "${_http}/${_ns}/${_pkg}-ur"
  fi
}

_clone_validate() {
  local \
    _pkg_dir="${1}" \
    _msg=() \
    _git_opts=()
  _git_opts+=(
    -C
      "${_pkg_dir}"
  )
  if [[ ! -d "${_pkg_dir}" ]]; then
    _msg=(
      "cloning into '${_pkg_dir}'"
      "failed."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _commit_last="$( \
    git \
      "${_git_opts[@]}" \
      rev-parse \
        HEAD 2>/dev/null || \
    true)"

  if [[ "${_commit_last}" == "" ]]; then
    _msg=(
      "repository not cloned."
    )
    _msg_warning \
      "${_msg[*]}"
  elif [[ "${_commit_last}" == "HEAD" ]]; then
    _msg=(
      "cloned an empty repository,"
      "deleting."
    )
    _msg_warning \
      "${_msg[*]}"
    rm \
      -rf \
      "${_pkg_dir}"
  elif [[ "${_commit_last}" != "HEAD" && \
	  "${_commit_last}" != "" ]]; then
    _retrieved="true"
    unset \
      GIT_TERMINAL_PROMPT
  fi
}

_git_clone() {
  local \
    _origin="${1}" \
    _publisher="${2}" \
    _pkg_dir="${3}" \
    _pkg="${4}" \
    _clone_opts=() \
    _uri
  if [[ "${quiet}" == "y" ]]; then
    _clone_opts+=(
      --quiet
    )
  fi
  _uri="$( \
    _git_repo_uri_get \
      "${_origin}" \
      "${_publisher}" \
      "${_pkg}")"
  GIT_TERMINAL_PROMPT=0 \
  git \
    clone \
      "${_clone_opts[@]}" \
      "${_uri}" \
      "${_pkg_dir}" || \
    true
  _clone_validate \
    "${_pkg_dir}"
}

_contract_call_opts_setup() {
  local \
    _msg=() \
    _evm_contract_call_opts=() \
    _ur_call_opts=()
  _evm_contract_call_opts+=(
    -n
      "${_target_network}"
    -k
      "${_api_key_path}"
  )
  _ur_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ur_abi}"
    -B
      "${_ur_bytecode}"
    -C
      "${_ur_compiler_output}"
  )
  _validate_call_opts+=(
    "${_ur_call_opts[@]}"
    -t
      "static"
  )
  _retrieve_call_opts+=(
    "${_ur_call_opts[@]}"
    -t
      "static"
    -N
      "${_wallet_name}"
  )
}

_recipe_archive_uri_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _revision="${4}" \
    _recipe_archive \
    _price \
    _purchased \
    _msg=() \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  _purchased="$( \
    evm-contract-call \
      "${_validate_call_opts[@]}" \
      "${_ur_address}" \
      "purchased" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}" \
      "${_wallet_address}")"
  if [[ "${_purchased}" == "false" ]]; then
    _msg=(
      "wallet '${_wallet_name}'"
      "identified by address '${_wallet_address}'"
      "has not purchased revision '${_revision}'"
      "of package '${_pkg}' by publisher '${_publisher}'".
    )
    _msg_error \
      "${_msg[*]}" \
      0
    _msg=(
      "getting price for revision '${_revision}'"
      "of package '${_pkg}' by publisher"
      "'${_publisher}'."
    )
    _msg_info \
      "${_msg[*]}"
    _price="$( \
      evm-contract-call \
        "${_validate_call_opts[@]}" \
        "${_ur_address}" \
        "price" \
        "${_pkg}" \
        "${_publisher}" \
        "${_revision}")"
    _msg=(
      "revision '${_revision}' of package"
      "'${_pkg}' by publisher"
      "'${_publisher}' can be purchased for"
      "\$${_price} by running"
      "'ur-purchase ${_pkg}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_purchased}" == "" ]]; then
    _msg=(
      "error retrieving the purchasing"
      "status of the package by the user"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _msg=(
    "retrieving recipe URI"
  )
  _msg_info \
    "${_msg[*]}"
  _recipe_archive_uri="$( \
    evm-contract-call \
      "${_retrieve_call_opts[@]}" \
      "${_ur_address}" \
      "readRecipe" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}")"
  if [[ "${_recipe_archive_uri}" == "" ]]; then
    _msg=(
      "target revision '${_revision}' of package"
      "'${_pkg}' by publisher"
      "'${_publisher}' does not exist or there has"
      "been an error retrieving it."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_revision_latest_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _msg=() \
    _revno
  _msg=(
    "getting latest revision for"
    "package '${_pkg}' and publisher"
    "'${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _revno="$( \
    evm-contract-call \
      "${_validate_call_opts[@]}" \
      "${_ur_address}" \
      "revNo" \
      "${_pkg}" \
      "${_publisher}")"
  if [[ "${_revno}" == "0" ]]; then
    _msg=(
      "publisher '${_publisher}'"
      "has published no '${_pkg}'"
      "package."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif (( 0 < "${_revno}" )); then
    _revision_latest="$(( \
      _revno - 1))"
    _msg=(
      "latest revision for '${_pkg}'"
      "is '${_revision_latest}'."
    )
    _msg_info \
      "${_msg[*]}"
  else
    _msg=(
      "error while retrieving"
      "revision for package '${_pkg}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_recipe_archive_get() {
  local \
    _uri="${1}" \
    _dest="${2}" \
    _evmfs_opts=() \
    _msg=()
  _msg=(
    "Saving recipe in '${_dest}'."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_opts+=(
      -v
    )
  fi
  _evmfs_opts+=(
    -o
      "${_dest}"
  )
  evmfs \
    "${_evmfs_opts[@]}" \
    get \
      "${_uri}" || \
    true
  if [[ ! -e "${_dest}" ]]; then
    _msg=(
      "Error saving the build"
      "recipe in '${_dest}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ -e "${_dest}" ]]; then
    _msg=(
      "Recipe archive correctly saved onto"
      "'${_dest}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_signature_keyring_verify() {
  local \
    _gpg_out="${1}" \
    _nopubkey_string \
    _goodsig_string \
    _fingerprint_string \
    _errsig_string \
    _fingerprint
   _nopubkey_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "^\[GNUPG:\] NO_PUBKEY " || \
      true)"
  _goodsig_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "^\[GNUPG:\] GOODSIG " || \
      true)"
  if [[ "${_nopubkey_string}" == "" ]] && \
     [[ "${_goodsig_string}" != "" ]]; then
    _fingerprint_string="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] KEY_CONSIDERED " || \
        true)"
    _fingerprint="$( \
      echo \
        "${_fingerprint_string}" | \
        awk \
          '{print $3}')"
    _msg=(
      "the key used to sign the archive"
      "is correct and has fingerprint"
      "'${_fingerprint}'."
    )
  elif [[ "${_nopubkey_string}" != "" ]] && \
       [[ "${_goodsig_string}" == "" ]]; then
    _errsig_string="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] ERRSIG " || \
        true)"
    _fingerprint="$( \
      echo \
        "${_errsig_string}" | \
        awk \
          '{print $9}')"
    _msg=(
      "archive signed with unknown"
      "fingerprint '${_fingerprint}'."
      "If you are sure the fingerprint"
      "is indeed correct run"
      "'ur-publishers update'"
      "to update the Ur publishers"
      "signatures' database."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_signature_author_verify() {
  local \
    _publisher="${1}" \
    _gpg_out="${2}" \
    _author_string \
    _msg=() \
    _unsigned \
    _patterns=() \
    _pattern
  _patterns=(
    "^\[GNUPG:\] NEWSIG "
    "^\[GNUPG:\] VALIDSIG "
  )
  _publisher="$( \
    echo \
      "${_publisher}" | \
      tr \
        '[:upper:]' \
	'[:lower:]')"
  for _pattern in "${_patterns[@]}"; do
    _author_string="$( \
      echo \
        "${_gpg_out}" | \
        grep \
	  "${_pattern}" || \
        true)"
    _author="$( \
      echo \
        "${_author_string}" | \
        awk \
          '{print $3}' | \
          tr \
            '[:upper:]' \
            '[:lower:]')"
    if [[ "${_author}" != "" ]]; then
      break
    fi
  done
  if [[ "${_author_string}" == "" ]]; then
    _unsigned="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] NODATA 3" || \
        true)"
    if [[ "${_unsigned}" != "" ]]; then
      _msg=(
        "The archive is not signed."
      )
    else
      _msg=(
        "Unknown GNUPG error."
        "GNUPG output:"
      )
    fi
    _msg_error \
      "${_msg[*]}" \
      0
    echo \
      "${_gpg_out}"
  fi
  if [[ "${_author}" == "" ]]; then
    _msg=(
      "archive '${_archive}' is"
      "missing an author."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_author}" != *"@${_publisher}" ]]; then
    _msg=(
      "archive '${_archive}' is signed"
      "by '${_author}' while it should"
      "be signed by '${_publisher}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_recipe_archive_validate() {
  local \
    _archive="${1}" \
    _publisher="${2}" \
    _gpg_out \
    _gpg_opts=() \
    _author \
    _msg=()
  _msg=(
    "Validating archive"
    "'${_archive}' has been properly"
    "signed by '${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --with-colons
    --status-fd
      1
    --verify
  )
  if [[ ! -e "${_archive}" ]]; then
    _msg=(
      "somehow the archive '${_archive}'"
      "does not exist."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ -e "${_archive}" ]]; then
    _msg=(
      "Found archive at location"
      "'${_archive}.'"
    )
  fi
  if [[ "${quiet}" == "y" ]]; then
    _gpg_out="$( \
      gpg \
        "${_gpg_opts[@]}" \
        "${_archive}" 2>/dev/null || \
      true)"
  elif [[ "${quiet}" == "n" ]]; then
    _gpg_out="$( \
      gpg \
        "${_gpg_opts[@]}" \
        "${_archive}" || \
      true)"
  fi
  if [[ "${_gpg_out}" == "" ]]; then
    _msg=(
      "Error verifying archive signature."
      "Try running 'ur-publishers update'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _signature_author_verify \
    "${_publisher}" \
    "${_gpg_out}"
  _signature_keyring_verify \
    "${_gpg_out}"
}

_archive_contents_read() {
  local \
    _archive="${1}" \
    _tar_opts=() \
    _content \
    _contents=() \
    _msg=()
  _tar_opts+=(
    -t
    -f
  )
  mapfile \
    -d \
    $'\n' \
    _contents < \
    <(tar \
        "${_tar_opts[@]}" \
        "${_archive}" || \
      true)
  for _content in "${_contents[@]}"; do
    _archive_contents+=(
      "${_content%$'\n'}"
    )
  done
  if [[ "${_archive_contents[*]}" == "" ]]; then
    _msg=(
      "corrupted or empty archive '${_archive}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_archive_contents_check() {
  local \
    _pkg="${1}" \
    _archive="${2}" \
    _archive_contents=() \
    _file \
    _msg=()
  _msg=(
    "verifying '${_archive}'"
    "integrity for package '${_pkg}'."
  )
  _msg_info \
    "${_msg[*]}"
  _archive_contents_read \
    "${_archive}"
  for _file in "${_archive_contents[@]}"; do
    if [[ "${_file}" != "${_pkg}/"* ]]; then
      _msg=(
        "found '${_file}' in archive '${_archive}',"
	"but all files must reside in the '${_pkg}/'"
	"directory."
      )
      _msg_error \
        "${_msg[*]}" \
	1
    fi
  done
}

_recipe_archive_extract() {
  local \
    _pkg="${1}" \
    _recipe_archive="${2}" \
    _pkg_dir="${3}" \
    _verify_skip="${4}" \
    _msg=() \
    _tar_archive \
    _integrity_error \
    _tar_opts=() \
    _gpg_opts=() \
    _archive_contents=() \
    _file
  _tar_archive="${_recipe_archive%.gpg}"
  if [[ "${_verify_skip}" == "n" ]]; then
    _gpg_opts+=(
      --homedir
        "${_gnupg_home}"
      --output
        "${_tar_archive}"
      --decrypt
    )
    gpg \
      "${_gpg_opts[@]}" \
      "${_recipe_archive}"
  fi
  _archive_contents_check \
    "${_pkg}" \
    "${_tar_archive}"
  if [[ "${quiet}" == "n" ]]; then
    _tar_opts+=(
      -v
    )
  fi
  _tar_opts+=(
    --directory
      "${_pkg_dir}"
    -x
    -f
  )
  tar \
    "${_tar_opts[@]}" \
    "${_tar_archive}"
}

_revision_validate() {
  local \
    _revision="${1}" \
    _revision_latest="${2}" \
    _msg=()
  if (( "${_revision}" < "${_revision_latest}" )); then
    _msg=(
      "getting revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_warning \
      "${_msg[*]}"
  elif (( "${_revision}" > "${_revision_latest}" )); then
    _msg=(
      "trying to get revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_ur_get() {
  local \
    _target_network="${1}" \
    _ur_address="${2}" \
    _publisher="${3}" \
    _ur_abi="${4}" \
    _ur_bytecode="${5}" \
    _ur_compiler_output="${6}" \
    _pkg_dir="${7}" \
    _pkg="${8}" \
    _revision="${9}" \
    _verify_skip="${10}" \
    _validate_call_opts=() \
    _retrieve_call_opts=() \
    _ur_publishers_opts=() \
    _recipe_archive_uri \
    _recipe_archive \
    _revision_latest \
    _gnupg_home \
    _msg=()
  _pkg_dir_setup \
    "${_pkg_dir}"
  _recipe_archive="${_pkg_dir}/${_pkg}.tar.xz"
  if [[ "${_verify_skip}" == "n" ]]; then
    _recipe_archive+=".gpg"
    _gnupg_home="${HOME}/.cache/ur/publishers/gnupg"
    if [[ ! -e "${_gnupg_home}" ]]; then
      _msg=(
        "User Repository publishers database"
	"does not exist. Running 'ur-publishers update'."
      )
      _msg_info \
        "${_msg[*]}"
      if [[ "${quiet}" == "n" ]]; then
        _ur_publishers_opts+=(
	  -v
        )
      fi
      ur-publishers \
        "${_ur_publishers_opts[@]}" \
        update
    fi
  fi
  _contract_call_opts_setup 
  _revision_latest_get \
    "${_ur_address}" \
    "${_publisher}" \
    "${_pkg}"
  if [[ "${_revision}" == "latest" || \
        "${_revision}" == "" ]]; then
    _revision="${_revision_latest}"
  fi
  _revision_validate \
    "${_revision}" \
    "${_revision_latest}"
  _recipe_archive_uri_get \
    "${_ur_address}" \
    "${_publisher}" \
    "${_pkg}" \
    "${_revision}"
  _recipe_archive_get \
    "${_recipe_archive_uri}" \
    "${_recipe_archive}"
  if [[ "${_verify_skip}" == "n" ]]; then
    _recipe_archive_validate \
      "${_recipe_archive}" \
      "${_publisher}"
  elif [[ "${_verify_skip}" == "y" ]]; then
    _msg=(
      "Skipping signature verification."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _recipe_archive_extract \
    "${_pkg}" \
    "${_recipe_archive}" \
    "${_pkg_dir}" \
    "${_verify_skip}"
  _retrieved="true"
}

_source_get_opts() {
  local \
    _origin="${1}" 
  if [[ "${_origin}" == "ur" ]]; then
    _cmd=(
      "_ur_get"
    )
    _cmd_args=(
      "${_target_network}"
      "${_ur_address}"
      "${_publisher}"
      "${_ur_abi}"
      "${_ur_bytecode}"
      "${_ur_compiler_output}"
      "${_pkg_dir}"
      "${_pkg}"
      "${_revision}"
      "${_verify_skip}"
    )
  else
    _check_cmd \
      'git'
    _cmd=(
      "_git_clone"
    )
    _cmd_args=(
      "${_origin}"
      "${_publisher}"
      "${_pkg_dir}"
      "${_pkg}"
    )
  fi
}

_origin_validate() {
  local \
    _target_origin="${1}"
  if [[ " ${_origins[*]} " != *" ${_target_origin}"* ]]; then
    _msg_error \
      "unknown origin '${_target_origin}'." \
      1
  fi
}

_origins_sort() {
  local \
    _target_origin="${1}" \
    _origins_new=() \
    _origin
  _origins_new+=(
    "${_target_origin}"
  )
  for _origin in \
    "${_origins[@]}"; do
    if [[ "${_origin}" != "${_target_origin}" ]]; then
      _origins_new+=(
        "${_origin}"
      )
    fi
  done
  _origins=(
    "${_origins_new[@]}"
  )
}

_pkg_dir_setup() {
  local \
    _dir="${1}"
  mkdir \
    -p \
    "${_dir}"
  chmod \
    700 \
    "${_dir}"
}

_work_dir_check() {
  local \
    _msg=()
  if [[ ! -d "${_work_dir}" ]]; then
    _msg=(
      "work directory '${_work_dir}'"
      "does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_aspe() {
  local \
    _ur_address="${1}" \
    _ur_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _retrieve_force="${10}" \
    _verify_skip="${11}" \
    _origin="${12}" \
    _publisher="${13}" \
    _revision="${14}" \
    _work_dir="${15}" \
    _output_dir="${16}" \
    _pkgs=() \
    _origin \
    _origins=() \
    _pkg_dir \
    _recipe_dir \
    _retrieved \
    _ur_abi \
    _ur_bytecode \
    _ur_compiler_output \
    _cmd=() \
    _cmd_args=() \
    _msg=()
  shift \
    16
  _pkgs=(
    "$@"
  )
  _work_dir_check
  _origins=(
    "ur"
    "gur"
    "aur"
    "archlinux"
  )
  _origin_validate \
    "${_origin}"
  _origins_sort \
    "${_origin}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "UserRepository" \
    "_ur" \
    "${_ur_version}"
  for _pkg in "${_pkgs[@]}"; do
    _retrieved="false"
    _pkg_dir="${_work_dir}/${_pkg}"
    for _origin in "${_origins[@]}"; do
      _source_get_opts \
        "${_origin}"
      "${_cmd[@]}" \
        "${_cmd_args[@]}"
      if [[ "${_retrieved}" == "true" ]]; then
	if [[ "${_origin}" == "ur" ]]; then
          _recipe_dir="${_pkg_dir}/${_pkg}" 
	else
          _recipe_dir="${_pkg_dir}" 
	fi
        mv \
          "${_recipe_dir}" \
	  "${_output_dir}"
        break
      fi
      if [[ "${_retrieve_force}" == "n" ]]; then
        break
      fi
    done
    if [[ "${_retrieved}" == "false" ]]; then
      _msg=(
        "error retrieving '${_pkg}'"
        "sources."
      )
      _msg_error \
        "${_msg[*]}" \
	1
    elif [[ "${_retrieved}" == "true" ]]; then
      _msg=(
        "build sources for '${_pkg}'"
        "correctly retrieved."
      )
      _msg_info \
        "${_msg[*]}"
    fi
  done
}

_ur_publisher_auto_detect() {
  local \
    _msg=()
  _msg=(
    "Ur publisher not specified,"
    "retrieving own package recipe"
    "if published."
  )
  _msg_warning \
    "${_msg[*]}"
  _publisher="$( \
    evm-wallet \
     get \
       "${wallet_name}" \
       "address")"
}

_source_publisher_auto_detect() {
  local \
    _origin \
    _publisher
  _set_override \
    "source" \
    "publisher" \
    ""
  _origin="$( \
    _get \
      "source" \
      "origin")"
  _publisher="$( \
    _get \
      "source" \
      "publisher")"
  if [[ "${_publisher}" == "" ]]; then
    if [[ "${_origin}" == "ur" ]]; then
      _ur_publisher_auto_detect
    elif [[ "${_origin}" == "gur" ]]; then
      _publisher="themartiancompany"
    elif [[ "${_origin}" == "aur" ]]; then
      _publisher=""
    elif [[ "${_origin}" == "archlinux" ]]; then
      _publisher="archlinux"
    fi
  fi
  _set \
    "source" \
    "publisher" \
    "${_publisher}"
}

_work_dir_auto_detect() {
  local \
    _work_dir
  _work_dir="${HOME}/.cache/aspe"
  mkdir \
    -p \
    "${_work_dir}"
  chmod \
    700 \
    "${_work_dir}"
  _set_override \
    "work" \
    "dir" \
    "${_work_dir}"
}

# Set defaults and, if present, overrides
# command line option parameters
_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _work_dir_auto_detect
  _set_override \
    "output" \
    "dir" \
    "$(realpath \
         $(pwd))"
  _set_override \
    "source" \
    "origin" \
    "ur"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "ur" \
    "$(_get \
         "user" \
         "level")"
  _network_auto_detect \
    "UserRepository" \
    "$(_get \
         "deployments" \
         "dir")" \
    "$(_get \
         "user" \
         "level")"
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "$(_get \
              "wallet" \
              "name")")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "$(_get \
                "wallet" \
                "name")" \
           "address")"
  _contract_version_auto_detect \
    "$(_get \
         "deployments" \
         "dir")" \
    "UserRepository" \
    "ur" \
    "$(_get \
         "target" \
         "network")"
  _contract_address_auto_detect \
    "ur" \
    "UserRepository" \
    "ur" \
    "$(_get \
         "target" \
         "network")" \
    "$(_get \
         "ur" \
         "version")" \
    "$(_get \
         "user" \
         "level")" \
    "$(_get \
         "deployments" \
         "dir")"
  _source_publisher_auto_detect
  _set_override \
    "target" \
    "revision" \
    "latest"
  _set_override \
    "retrieve" \
    "force" \
    "n"
  _set_override \
    "verify" \
    "skip" \
    "n"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _deployment \
    _networks=() \
    _usage_text
  _deployment="$( \
    _get \
      "deployments" \
      "dir")/UserRepository"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Build recipes retrieval tool.

Usage:
  $(_get "app" "name")
    [options]
    [packages]

networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -S <origin>            Source origin ('ur', 'gur', 'archlinux',
                            'aur').
			    Default: $(_get "source" "origin")
     -P <publisher>         Source publisher. Valid for origins
                            are 'ur' and 'gur'. For 'gur'it defaults to
                            'themartiancompany', for 'ur' to the
                            kirsh trusted Ur publisher.
			    Default: $(_get "source" "publisher")
     -W <work_dir>          Work directory.
			    Default: $(_get "output" "dir")
     -o <output_dir>        Output directory.
			    Default: $(_get "output" "dir")
     -r <revision>          Target recipe revision to retrieve.
			    Default: $(_get "target" "revision")
     -A <ur_address>        Address of the UserRepository
                            contract on the network.
                            Default: $(_get "ur" "address")
     -V <ur_version>        Version of the target UserRepository
                            contract.
                            Default: $(_get "ur" "version")
     -u                     Whether to retrieve user repository
                            address from user directory or custom
                            deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name (${_networks[*]}).
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -f                     If enabled attempts to retrieve the
                            source from any of the available
			    sources.
                            Default: $(_get "retrieve" "force")

     -c                     Colors.
     -h                     This message.
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Get date:   ${get_date}"
  _msg_info "                  Source origin:   ${source_origin}"
  _msg_info "               Source publisher:   ${source_publisher}"
  _msg_info "                Target revision:   ${target_revision}"
  _msg_info "                 Work directory:   ${work_dir}"
  _msg_info "               Output directory:   ${output_dir}"
  _msg_info "                     Ur address:   ${ur_address}"
  _msg_info "                     Ur version:   ${ur_version}"
  _msg_info "                     User level:   ${user_level}"
  _msg_info "          Deployments directory:   ${deployments_dir}"
  _msg_info "                    Wallet name:   ${wallet_name}"
  _msg_info "                    Wallet path:   ${wallet_path}"
  _msg_info "                Wallet password:   ${wallet_password}"
  _msg_info "                    Wallet seed:   ${wallet_seed}"
  _msg_info "                 Target network:   ${target_network}"
  _msg_info "                        API key:   ${api_key}"
  _msg_info "                 Force retrieve:   ${retrieve_force}"
  _msg_info "    Skip signature verification:   ${verify_skip}"
  _msg_info "                       Packages:   ${pkgs[@]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'S:P:W:o:r:A:V:ud:N:w:p:s:n:k:fUcvh?' \
    arg; do
  case \
    "${arg}" in
    S) override_source_origin="${OPTARG}" ;;
    P) override_source_publisher="${OPTARG}" ;;
    W) override_work_dir="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    r) override_target_revision="${OPTARG}" ;;
    A) override_ur_address="${OPTARG}" ;;
    V) override_ur_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    f) override_retrieve_force="y" ;;
    U) override_verify_skip="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
pkgs+=(
  "$@"
)
if (( $# < 1 )); then
  _msg_error \
    "No packages specified" \
    0
  _usage \
    1
fi
_set_overrides
app_opts+=(
  "${ur_address}"
  "${ur_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${retrieve_force}"
  "${verify_skip}"
  "${source_origin}"
  "${source_publisher}"
  "${target_revision}"
  "${work_dir}"
  "${output_dir}"
  "${pkgs[@]}"
)
_show_config
_aspe \
  "${app_opts[@]}"
