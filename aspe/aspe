#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  pkgs=()
  get_date=""
  source_publisher=""
  output_dir=""
  color=""
  quiet=""
}

# Get source from a selected publisher
# $1: publisher (archlinux,
#                aur,
#                ur)
_git_repo() {
  local \
    _pub="${1}" \
    _pkg="${2}" \
    _http
  if [[ "${_pub}" == "archlinux" ]]; then
    _http='https://gitlab.archlinux.org'
    echo \
      "${_http}/${_pub}/packaging/packages/${_pkg}"
  fi
  if [[ "${_pub}" == "aur" ]]; then
    _http='https://aur.archlinux.org'
    echo \
      "${_http}/${_pkg}"
  fi
  if [[ "${_pub}" == "ur" ]]; then
    _http="http://github.com"
    _ns="themartiancompany"
    echo \
      "${_http}/${_ns}/${_pkg}-${_pub}"
  fi
  if [[ "${_pub}" == "etherscan" ]]; then
    _contract="address" 
    echo \
      "${_contract}"
  fi
}

_git_clone() {
  local \
    _pub="${1}" \
    _pkg="${2}" \
    _clone_opts=()
  if [[ "${quiet}" == "y" ]]; then
    _clone_opts+=(
      --quiet
    )
  fi
  git \
    clone \
      "${_clone_opts[@]}" \
      "$(_git_repo \
           "${_pub}" \
           "${_pkg}")" \
      "${_output_dir}/${_pkg}"
}

_aspe() {
  local \
    _pub="${1}" \
    _output_dir="${2}" \
    _pkgs=()
  shift \
    2
  _pkgs=(
    "$@"
  )
  export \
    GIT_TERMINAL_PROMPT=0
  for \
    _pkg in \
      "${_pkgs[@]}"; do
    if [[ "${_pub}" == "etherscan" ]]; then
      _ipfs_cat \
	"$(_etherscan_get)"
    elif [[ "${_pub}" != "etherscan" ]]; then
      _git_clone \
        "${_pub}" \
        "${_pkg}" || ( \
      _pub="aur" && \
      _git_clone \
        "${_pub}" \
        "${_pkg}" ) || ( \
      _pub="ur" && \
      _git_clone \
        "${_pub}" \
        "${_pkg}" )
    fi
  done
  unset \
    GIT_TERMINAL_PROMPT
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "output" \
    "dir" \
    "$(realpath \
         $(pwd))"
  _set_override \
    "source" \
    "publisher" \
    "ur"
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -p <origin>          Source publisher.
			  Default: $(_get "source" "publisher")
     -o <output_dir>      Output directory.
			  Default: $(_get "output" "dir")
     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "         Source publisher:   $(_get "source" "publisher")"
  _msg_info "         Output directory:   $(_get "output" "dir")"
  _msg_info "                 Packages:   ${pkgs[@]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'p:o:cvh?' \
    arg; do
  case \
    "${arg}" in
    p) override_source_pub="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
pkgs+=(
  "$@"
)
if (( $# < 1 )); then
  _msg_error \
    "No packages specified" \
    0
  _usage \
    1
fi
_set_overrides
app_opts+=(
  "${source_publisher}"
  "${output_dir}"
  "${pkgs[@]}"
)
_show_config
_aspe \
  "${app_opts[@]}"
